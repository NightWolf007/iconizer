{{- with (datasource "data") -}}
{{ $fontCamel := .font | strings.CamelCase }}
{{ $font := $fontCamel | strings.Title }}
// Code generated by gomplate; DO NOT EDIT.
// This file generated by gomplate at
// {{ (time.Now).UTC.Format time.RFC1123 }}
// using data from datafiles/{{ .font | strings.SnakeCase }}.json
package icons

import (
	"path/filepath"
)

var {{ $fontCamel }}IconsMap = map[string]Icon{
{{- range $key, $value := .filetypes }}
	"{{ $key }}": Icon{ {{ printf "%+q" $value.symbol }}, {{ $value.color }} },
{{- end }}
}

// {{ $font }} represents {{ .font }} font
type {{ $font }}Font struct{}

// GetIcon returns icon by filetype
// It returns empty icon if not matches found
func ({{ $font }}Font) GetIcon(filename string) Icon {
	baseFilename := filepath.Base(filename)
	if icon, ok := {{ $fontCamel }}IconsMap[baseFilename]; ok {
		return icon
	}

	ext := filepath.Ext(filename)
	if ext == "" {
		return Icon{}
	}

	if icon, ok := {{ $fontCamel }}IconsMap[ext]; ok {
		return icon
	}

	return Icon{}
}

// DefaultIcon returns default icon
func ({{ $font }}Font) DefaultIcon() Icon {
	return Icon{ {{ printf "%q" .default.symbol }}, {{ .default.color }} }
}

// DirIcon returns directory icon
func ({{ $font }}Font) DirIcon() Icon {
	return Icon{ {{ printf "%q" .directory.symbol }}, {{ .directory.color }} }
}

// String returns string representation of font
func ({{ $font }}Font) String() string {
	return "{{ .font }}"
}
{{- end }}
